{"ast":null,"code":"var _jsxFileName = \"/Users/cihat.zoroglu/playground/nats-ws/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport { connect, StringCodec } from \"nats.ws\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  useEffect(() => {\n    let nc; // NATS bağlantısını tutacak değişken\n\n    const connectToNats = async () => {\n      try {\n        // NATS sunucusuna bağlan\n        nc = await connect({\n          servers: \"ws://roundhouse.proxy.rlwy.net:28032\",\n          // Sunucu adresinizi güncelleyin\n          debug: true,\n          // Bağlantı sırasında daha fazla bilgi için\n          ignoreServerUpdates: true // Eğer birden fazla sunucu varsa ve bağlantı güncellenmemesi gerekiyorsa\n        });\n        console.log(\"Connected to NATS!\");\n\n        // String codec oluştur\n        const sc = StringCodec();\n\n        // Belirli bir konuya abone ol\n        const sub = nc.subscribe(\"test.subject\");\n        console.log(\"Subscribed to 'test.subject'\");\n\n        // Mesajları dinle\n        for await (const msg of sub) {\n          console.log(`Received message: ${sc.decode(msg.data)}`);\n        }\n      } catch (error) {\n        console.error(\"Error connecting to NATS:\", error);\n      }\n    };\n    connectToNats();\n\n    // Cleanup: Bağlantıyı bileşen kaldırıldığında kapat\n    return () => {\n      if (nc) {\n        nc.close();\n        console.log(\"NATS connection closed.\");\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"NATS WebSocket Test\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Listening to NATS messages...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","connect","StringCodec","jsxDEV","_jsxDEV","App","_s","nc","connectToNats","servers","debug","ignoreServerUpdates","console","log","sc","sub","subscribe","msg","decode","data","error","close","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/cihat.zoroglu/playground/nats-ws/src/App.js"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport { connect, StringCodec } from \"nats.ws\";\n\nfunction App() {\n  useEffect(() => {\n    let nc; // NATS bağlantısını tutacak değişken\n\n    const connectToNats = async () => {\n      try {\n        // NATS sunucusuna bağlan\n        nc = await connect({\n          servers: \"ws://roundhouse.proxy.rlwy.net:28032\", // Sunucu adresinizi güncelleyin\n          debug: true, // Bağlantı sırasında daha fazla bilgi için\n          ignoreServerUpdates: true, // Eğer birden fazla sunucu varsa ve bağlantı güncellenmemesi gerekiyorsa\n        });\n        console.log(\"Connected to NATS!\");\n\n        // String codec oluştur\n        const sc = StringCodec();\n\n        // Belirli bir konuya abone ol\n        const sub = nc.subscribe(\"test.subject\");\n        console.log(\"Subscribed to 'test.subject'\");\n\n        // Mesajları dinle\n        for await (const msg of sub) {\n          console.log(`Received message: ${sc.decode(msg.data)}`);\n        }\n      } catch (error) {\n        console.error(\"Error connecting to NATS:\", error);\n      }\n    };\n\n    connectToNats();\n\n    // Cleanup: Bağlantıyı bileşen kaldırıldığında kapat\n    return () => {\n      if (nc) {\n        nc.close();\n        console.log(\"NATS connection closed.\");\n      }\n    };\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>NATS WebSocket Test</h1>\n        <p>Listening to NATS messages...</p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,OAAO,EAAEC,WAAW,QAAQ,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACbN,SAAS,CAAC,MAAM;IACd,IAAIO,EAAE,CAAC,CAAC;;IAER,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACF;QACAD,EAAE,GAAG,MAAMN,OAAO,CAAC;UACjBQ,OAAO,EAAE,sCAAsC;UAAE;UACjDC,KAAK,EAAE,IAAI;UAAE;UACbC,mBAAmB,EAAE,IAAI,CAAE;QAC7B,CAAC,CAAC;QACFC,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;;QAEjC;QACA,MAAMC,EAAE,GAAGZ,WAAW,CAAC,CAAC;;QAExB;QACA,MAAMa,GAAG,GAAGR,EAAE,CAACS,SAAS,CAAC,cAAc,CAAC;QACxCJ,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;;QAE3C;QACA,WAAW,MAAMI,GAAG,IAAIF,GAAG,EAAE;UAC3BH,OAAO,CAACC,GAAG,CAAC,qBAAqBC,EAAE,CAACI,MAAM,CAACD,GAAG,CAACE,IAAI,CAAC,EAAE,CAAC;QACzD;MACF,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdR,OAAO,CAACQ,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACnD;IACF,CAAC;IAEDZ,aAAa,CAAC,CAAC;;IAEf;IACA,OAAO,MAAM;MACX,IAAID,EAAE,EAAE;QACNA,EAAE,CAACc,KAAK,CAAC,CAAC;QACVT,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;MACxC;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBACET,OAAA;IAAKkB,SAAS,EAAC,KAAK;IAAAC,QAAA,eAClBnB,OAAA;MAAQkB,SAAS,EAAC,YAAY;MAAAC,QAAA,gBAC5BnB,OAAA;QAAAmB,QAAA,EAAI;MAAmB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC5BvB,OAAA;QAAAmB,QAAA,EAAG;MAA6B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9B;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV;AAACrB,EAAA,CAjDQD,GAAG;AAAAuB,EAAA,GAAHvB,GAAG;AAmDZ,eAAeA,GAAG;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}